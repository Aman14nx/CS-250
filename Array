Class Array


This C++ program manages student data by calculating the average test scores and assigning letter grades based on user-inputted information. Here's a breakdown of what it does:

It defines a Student struct that stores information about each student, including their name, ID number, the number of tests they took, an array to store their test scores, their average test score, and their letter grade.

There are several functions defined:

computeAverage: Calculates the average test score for a given student by summing their test scores and dividing by the number of tests.
CalGrade: Calculates the letter grade for each student based on their average score.
printStudentDetails: Prints the details of a student, including their name, ID number, average test score, and letter grade.
In the main function:

It prompts the user to input the number of students.
Dynamically allocates an array of Student structs to store student information based on the user's input.
For each student, it prompts for their name, ID number, number of tests, and their test scores.
Calls the CalGrade function to calculate letter grades.
Finally, it prints out the details of each student, including their calculated average score and letter grade.
After processing and displaying the student data, the program cleans up dynamically allocated memory to prevent memory leaks.

*Down here here is my C++ code with full comment description 
/*                                                               ***
 * ***     This program manages student data by calculating the average test score and assigning
          letter grades based on user-inputted information. It offers flexibility in handling varying
          class sizes and test criteria. The program prompts for student details, including names,
          ID numbers, and test scores, and displays the results in an organized format. It utilizes dynamic
          memory allocation and modular functions for efficient data processing and readability.1
 * ***                                                                ***
 * *********************************************************************/

#include <iostream>
#include <cstring>
using namespace std;

struct Student {
    string name;
    string idNum;
    int numTests;
    int* scores;
    double average;
    char grade;
};

// Function to calculate the average test score for a student
void computeAverage(Student& student) {
    double total = 0;
    for (int i = 0; i < student.numTests; i++) {
        total += student.scores[i];
    }
    student.average = total / student.numTests;
}


// Function to calculate the course grade for each student
void CalGrade(Student* students, int numStudents) {
    for (int i = 0; i < numStudents; i++) {
        computeAverage(students[i]);

        // Assigning letter grades based on the average score
        char grade;
        if (students[i].average >= 91) {
            grade = 'A';
        } else if (students[i].average >= 81) {
            grade = 'B';
        } else if (students[i].average >= 71) {
            grade = 'C';
        } else if (students[i].average >= 61) {
            grade = 'D';
        } else {
            grade = 'F';
        }

        students[i].grade = grade;
    }
}


// Function to print the details of a student
void printStudentDetails(Student& student) {
    cout << "Name: " << student.name << endl;
    cout << "ID Number: " << student.idNum << endl;
    cout << "Average Test Score: " << student.average << endl;
    cout << "Course Grade: " << student.grade << endl;
    cout << endl;
}

int main() {
    int numStudents;
    cout << "Enter the number of students: ";
    cin >> numStudents;

    // Dynamically allocate an array of structs to store student information
    Student* students = new Student[numStudents];

    for (int i = 0; i < numStudents; i++) {
        cout << "Enter the name of student " << i + 1 << ": ";
        cin >> students[i].name;

        cout << "Enter the ID number of " << students[i].name << ": ";
        cin >> students[i].idNum;

        cout << "Enter the number of tests for " << students[i].name << ": ";
        cin >> students[i].numTests;

        // Dynamically allocate an array of integers for each student to store test scores
        students[i].scores = new int[students[i].numTests];

        cout << "Enter the test scores for " << students[i].name << ":" << endl;
        for (int j = 0; j < students[i].numTests; j++) {
            cout << "Score " << j + 1 << ": ";
            cin >> students[i].scores[j];
        }
        cout << endl;
    }

    CalGrade(students, numStudents);

    for (int i = 0; i < numStudents; i++) {
        printStudentDetails(students[i]);
    }

    // Clean up memory
    for (int i = 0; i < numStudents; i++) {
        delete[] students[i].scores;
    }
    delete[] students;

    return 0;
}

//**This code is help full for to automates the process of calculating and assigning letter 
grades to students based on their test scores. It offers flexibility for different class 
sizes and is suitable for educational settings. Key features include dynamic memory allocation,
modular functions, and data accuracy. ****/
